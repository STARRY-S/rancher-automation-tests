name: Provisioning Tests

on:
  workflow_dispatch:
    inputs:
      RPM_VERSION:
        description: 'Rancher Version (v2.10.0-ent-rcX)'
        default: 'v2.10.0-ent-rc1'
        required: true
      K3S_VERSION:
        description: 'K3s version for Rancher Local Cluster'
        default: 'v1.31.2+k3s1'
        required: true
      RPM_LOCAL_NAME:
        description: 'Rancher local cluster name, for run multiple tests'
        default: 'starry-1'
      TEST_CASE:
        description: "Test case to run, separated by white spaces (aws/k3s-openeuler-aws aliyun/k3s-ubuntu-aliyun)"
        required: false
        default: 'awscn/test-awscn'
      RANCHER_CLUSTERS:
        description: 'Downstream cluster versions, separated by white spaces (v1.24.11+k3s1 v1.24.11+rke2r1)'
        required: true
        default: 'v1.31.2+rke2r1 v1.31.2+k3s1 v1.31.2-rancher2-1'
      TEST_CODE_REPO:
        description: 'GitHub Repo for clone provisioning test code'
        required: true
        default: 'github.com/STARRY-S/pandaria-tests'
      TEST_CODE_BRANCH:
        description: 'GitHub Branch for clone provisioning test code'
        required: true
        default: 'release/v2.10'
      RANCHER_CODE_REPO:
        description: 'GitHub Repo of rancher'
        required: true
        default: "github.com/cnrancher/pandaria"
      ENVS:
        description: 'Other envs for tests, separated by white spaces (ENV1=AAA ENV2=BBB)'
        required: false
        default: 'SYSTEM_DEFAULT_REGISTRY=docker.hxstarrys.me ARM64_ONLY=1'

env:
  # Pre-define environment variables
  CATTLE_MACHINE_VERSION: v0.15.0-rancher116
  AUTOK3S_VERSION: v0.9.3

  # ENV defined by workflow dispatch inputs
  RPM_VERSION: ${{ github.event.inputs.RPM_VERSION }}
  K3S_VERSION: ${{ github.event.inputs.K3S_VERSION }}
  TEST_CASE: ${{ github.event.inputs.TEST_CASE }}
  RANCHER_CLUSTERS: ${{ github.event.inputs.RANCHER_CLUSTERS }}
  TEST_CODE_REPO: ${{ github.event.inputs.TEST_CODE_REPO }}
  TEST_CODE_BRANCH: ${{ github.event.inputs.TEST_CODE_BRANCH }}
  RANCHER_CODE_REPO: ${{ github.event.inputs.RANCHER_CODE_REPO }}
  INPUT_ENVS: ${{ github.event.inputs.ENVS }}

  # ENV from secrets
  ADMIN_PWD: ${{ secrets.ADMIN_PWD }}       # Rancher password
  SSH_KEY_PAIR: ${{ secrets.SSH_KEY_PAIR }} # SSH secret key PEM
  SSH_KEY: ${{ secrets.SSH_KEY }}           # SSH secret key filename
  HUB_USER: ${{ secrets.DOCKERHUB_USERNAME }} # Dockerhub username
  HUB_PASS: ${{ secrets.DOCKERHUB_PASSWORD }} # Dockerhub password
  TEST_REPO_OAUTH_TOKEN: ${{ secrets.TEST_REPO_OAUTH_TOKEN}}        # READ ONLY token for access provisioning test repo.
  RANCHER_REPO_OAUTH_TOKEN: ${{ secrets.RANCHER_REPO_OAUTH_TOKEN }} # READ ONLY token for access rancher source code repo.

  # AWS (Global)
  AWS_AK: ${{ secrets.AWS_AK }}
  AWS_SK: ${{ secrets.AWS_SK }}

  # AWSCN (China)
  AWSCN_AK: ${{ secrets.AWSCN_AK }}
  AWSCN_SK: ${{ secrets.AWSCN_SK }}

  # Aliyun
  ALIYUN_ACCESS_KEY_ID: ${{ secrets.ALIYUN_ACCESS_KEY_ID }}
  ALIYUN_SECRET_ACCESS_KEY: ${{ secrets.ALIYUN_SECRET_ACCESS_KEY }}

  # HWCloud
  HUAWEI_ACCESS_KEY: ${{ secrets.HUAWEI_ACCESS_KEY }}
  HUAWEI_SECRET_KEY: ${{ secrets.HUAWEI_SECRET_KEY }}
  HUAWEI_PROJECT_ID: ${{ secrets.HUAWEI_PROJECT_ID }}
  HUAWEI_REGION_ID: ${{ secrets.HUAWEI_REGION_ID }}

  # Tencent cloud
  TENCENT_ACCESS_KEY_ID: ${{ secrets.TENCENT_ACCESS_KEY_ID }}
  TENCENT_ACCESS_KEY_SECRET: ${{ secrets.TENCENT_ACCESS_KEY_SECRET }}
  TENCENT_SSH_KEY: ${{ secrets.TENCENT_SSH_KEY }}
  TENCENT_SSH_KEY_ID: ${{ secrets.TENCENT_SSH_KEY_ID }}

jobs:
  provisioning-tests:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup QEMU
        uses: docker/setup-qemu-action@v3
      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Install Go
        uses: actions/setup-go@v5
        with:
          go-version: 1.23.x
      - name: Setup Test Environment
        run: |
          scripts/ci/setup.sh
      - name: 'Run provisioning tests'
        run: |
          echo "Run provisioning tests"
          scripts/ci/run.sh
      - name: 'Cleanup'
        run: |
          scripts/ci/clean.sh
      - name: Check resource cleanup
        run : |
          # Build checker cli
          ./scripts/build.sh

          # Check cloud resource cleanup
          ./checker
